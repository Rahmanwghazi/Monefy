openapi: 3.0.0
info:
  version: 1.0.0
  title: Monefy API
  description: Mini-project Backend Development Class
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/Rahmanwghazi/monefy/1.0.0
tags:
- name: "User"
  description: "User resource"
- name: "Income"
  description: "Income resource"
- name: "Expense"
  description: "Book resource"
- name: "Plan"
  description: "Plan resource"

paths:
  /signup:
    post:
      tags: 
      - "User"
      summary: "Add new user"
      description: ""
      operationId: "reqAddNewUser"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ObjUserReqBody"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjUser"
        404:
          $ref: "#/components/responses/404"
        400:
          $ref: "#/components/responses/400"
  /signin:
    post:
      tags: 
      - "User"
      summary: "Login user"
      description: ""
      operationId: "reqSigninUser"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ObjUserSigninReqBody"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjUser"
        404:
          $ref: "#/components/responses/404"
        400:
          $ref: "#/components/responses/400"
  /users/edit:
    put:
      tags: 
      - "User"
      summary: "Login user"
      description: ""
      operationId: "reqEditUser"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ObjUserReqBody"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjUser"
        404:
          $ref: "#/components/responses/404"
        400:
          $ref: "#/components/responses/400"
          
          
  /income/add:
    post:
      tags: 
      - "Income"
      summary: "Add income"
      description: ""
      operationId: "reqAddNewIncome"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ObjIncomeReqBody"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjIncome"
        404:
          $ref: "#/components/responses/404"
        400:
          $ref: "#/components/responses/400"
  
  /income:
    get:
      tags: 
      - "Income"
      summary: "Get all income"
      description: ""
      operationId: "reqGetAllIncome"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjIncomeList"
        404:
          $ref: "#/components/responses/404"
        400:
          $ref: "#/components/responses/400"
  
  /income/{id}:
    get:
      tags: 
      - "Income"
      summary: "Get income by ID"
      description: ""
      operationId: "reqGetIncomeById"
      parameters:
        - in: path
          name: id
          description: "Income id"
          schema:
            type: integer
          required: true
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjIncome"
        404:
          $ref: "#/components/responses/404"
        400:
          $ref: "#/components/responses/400"
  
  /income/edit/{id}:
    put:
      tags: 
      - "Income"
      summary: "Edit income"
      description: ""
      operationId: "reqEditIncome"
      parameters:
        - in: path
          name: id
          description: "Income id"
          schema:
            type: integer
          required: true
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjIncome"
        404:
          $ref: "#/components/responses/404"
        400:
          $ref: "#/components/responses/400"
  
  /income/delete/{id}:
    delete:
      tags: 
      - "Income"
      summary: "Delete income"
      description: ""
      operationId: "reqDeleteIncome"
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        200:
          $ref: "#/components/responses/200_delete"
        404:
          $ref: "#/components/responses/404"
        400:
          $ref: "#/components/responses/400"


  /expense/add:
    post:
      tags: 
      - "Expense"
      summary: "Add expense"
      description: ""
      operationId: "reqAddNewExpense"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ObjExpenseReqBody"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjExpense"
        404:
          $ref: "#/components/responses/404"
        400:
          $ref: "#/components/responses/400"
  
  /expense:
    get:
      tags: 
      - "Expense"
      summary: "Get all expenses"
      description: ""
      operationId: "reqGetAllExpense"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjExpenseList"
        404:
          $ref: "#/components/responses/404"
        400:
          $ref: "#/components/responses/400"
  
  /expense/{id}:
    get:
      tags: 
      - "Expense"
      summary: "Get expense by ID"
      description: ""
      operationId: "reqGetExpenseById"
      parameters:
        - in: path
          name: id
          description: "Expense id"
          schema:
            type: integer
          required: true
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjExpense"
        404:
          $ref: "#/components/responses/404"
        400:
          $ref: "#/components/responses/400"
  
  /expense/edit/{id}:
    put:
      tags: 
      - "Expense"
      summary: "Edit expense"
      description: ""
      operationId: "reqEditExpense"
      parameters:
        - in: path
          name: id
          description: "Expense id"
          schema:
            type: integer
          required: true
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjExpense"
        404:
          $ref: "#/components/responses/404"
        400:
          $ref: "#/components/responses/400"
  
  /expense/delete/{id}:
    delete:
      tags: 
      - "Expense"
      summary: "Delete expense"
      description: ""
      operationId: "reqDeleteExpense"
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        200:
          $ref: "#/components/responses/200_delete"
        404:
          $ref: "#/components/responses/404"
        400:
          $ref: "#/components/responses/400"


  /plans/add:
    post:
      tags: 
      - "Plan"
      summary: "Add plan"
      description: ""
      operationId: "reqAddNewPlan"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ObjPlanReqBody"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjPlan"
        404:
          $ref: "#/components/responses/404"
        400:
          $ref: "#/components/responses/400"
  
  /plans:
    get:
      tags: 
      - "Plan"
      summary: "Get all plans"
      description: ""
      operationId: "reqGetAllPlans"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjPlanList"
        404:
          $ref: "#/components/responses/404"
        400:
          $ref: "#/components/responses/400"
  /plans/uninished:
    get:
      tags: 
      - "Plan"
      summary: "Get unfinished plans"
      description: ""
      operationId: "reqGetUnfinishedPlans"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjPlanList"
        404:
          $ref: "#/components/responses/404"
        400:
          $ref: "#/components/responses/400"
  /plans/finished:
    get:
      tags: 
      - "Plan"
      summary: "Get finished plans"
      description: ""
      operationId: "reqGetFinishedPlans"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjPlanList"
        404:
          $ref: "#/components/responses/404"
        400:
          $ref: "#/components/responses/400"
  /plans/{id}:
    get:
      tags: 
      - "Plan"
      summary: "Get plan by ID"
      description: ""
      operationId: "reqGetPlanById"
      parameters:
        - in: path
          name: id
          description: "Plan id"
          schema:
            type: integer
          required: true
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjPlan"
        404:
          $ref: "#/components/responses/404"
        400:
          $ref: "#/components/responses/400"
  
  /plans/edit/{id}:
    put:
      tags: 
      - "Plan"
      summary: "Edit plan"
      description: ""
      operationId: "reqEditPlan"
      parameters:
        - in: path
          name: id
          description: "Plan id"
          schema:
            type: integer
          required: true
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjPlan"
        404:
          $ref: "#/components/responses/404"
        400:
          $ref: "#/components/responses/400"
  
  /plans/delete/{id}:
    delete:
      tags: 
      - "Plan"
      summary: "Delete plan"
      description: ""
      operationId: "reqDeletePlan"
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        200:
          $ref: "#/components/responses/200_delete"
        404:
          $ref: "#/components/responses/404"
        400:
          $ref: "#/components/responses/400"
          
          
components:
  securitySchemes:
    jwtInternal:
      type: "http"
      scheme: "bearer"
    jwtMerchant:
      type: "http"
      scheme: "bearer"
  parameters:
    Authorization:
      in: "header"
      name: "Authorization"
      schema:
        type: "string"
      description: "JWT bearer token"
      example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
  responses:
    200_delete:
      description: "Success delete"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiResponse200Delete"
    401:
      description: "Unauthorized"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiResponse400"
    400:
      description: "Bad Request"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiResponse400"
    422:
      description: "Unacceptable Entity"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiResponse422"
    404:
      description: "Bad Request"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiResponse404"
  schemas:
    ObjDefaultDatesAttr:
      type: "object"
      properties:
        created_at:
          type: "string"
          example: "2021-10-10T00:00:00"
        updated_at:
          type: "string"
          example: "2021-10-10T00:00:00"
        deleted_at:
          type: "string"
          example: "2021-10-10T00:00:00"
    ObjUser:
      type: "object"
      allOf:
        - type: "object"
          properties:
            id:
              type: "integer"
              example: 1
            username:
              type: "string"
              example: "rahmanwghazi"
            email:
              type: "string"
              example: "rahmanwghazi@monefy.com"
            fullname:
              type: "string"
              example: "M. Rahman Wafiq Ghazi"
            dob:
              type: "string"
              example: "2000-06-20T00:00:00Z"   
        - $ref: "#/components/schemas/ObjDefaultDatesAttr"
    ObjUserReqBody:
      type: "object"
      allOf:
        - type: "object"
          properties:
            id:
              type: "integer"
              example: 1
            username:
              type: "string"
              example: "rahmanwghazi"
            password:
              type: "string"
              example: "123456"
            email:
              type: "string"
              example: "rahmanwghazi@monefy.com"
            fullname:
              type: "string"
              example: "M. Rahman Wafiq Ghazi"
            dob:
              type: "string"
              example: "2000-06-20T00:00:00Z"
    ObjUserSigninReqBody:
      type: "object"
      allOf:
        - type: "object"
          properties:
            username:
              type: "string"
              example: "rahmanwghazi"
            password:
              type: "string"
              example: "123456"

    ObjIncome:
      type: "object"
      allOf:
        - type: "object"
          properties:
            id:
              type: "integer"
              example: 1
            user_id:
              type: "integer"
              example: 1
            total:
              type: "integer"
              example: 2500000
            description:
              type: "string"
              example: "gaji oktober"
        - $ref: "#/components/schemas/ObjDefaultDatesAttr"
    ObjIncomeReqBody:
      type: "object"
      allOf:
        - type: "object"
          properties:
            id:
              type: "integer"
              example: 1
            user_id:
              type: "integer"
              example: 1
            total:
              type: "integer"
              example: 2500000
            description:
              type: "string"
              example: "gaji oktober"
    ObjIncomeList:
      type: "array"
      items:
        $ref: "#/components/schemas/ObjIncome"

    ObjExpense:
      type: "object"
      allOf:
        - type: "object"
          properties:
            id:
              type: "integer"
              example: 1
            user_id:
              type: "integer"
              example: 1
            total:
              type: "integer"
              example: 2500000
            description:
              type: "string"
              example: "beli bensin"
        - $ref: "#/components/schemas/ObjDefaultDatesAttr"
    ObjExpenseReqBody:
      type: "object"
      allOf:
        - type: "object"
          properties:
            id:
              type: "integer"
              example: 1
            user_id:
              type: "integer"
              example: 1
            total:
              type: "integer"
              example: 2500000
            description:
              type: "string"
              example: "gaji oktober"
    ObjExpenseList:
      type: "array"
      items:
        $ref: "#/components/schemas/ObjIncome"

    ObjPlan:
      type: "object"
      allOf:
        - type: "object"
          properties:
            id:
              type: "integer"
              example: 1
            user_id:
              type: "integer"
              example: 1
            product_id:
              type: "integer"
              example: 1
            total:
              type: "integer"
              example: 2500000
            description:
              type: "string"
              example: "ID: 100| Name: RD HAJI SYARIAH I HAJJ | Management: Insight Investments Management, PT | Custodian: BANK CIMB NIAGA - CUSTODY, Tbk, PT | Version: 06/10/2021"
            due_date:
              type: "string"
              example: "2000-06-20T00:00:00Z"
            plan_status:
              type: "integer"
              example: 1
        - $ref: "#/components/schemas/ObjDefaultDatesAttr"
    ObjPlanReqBody:
      type: "object"
      allOf:
        - type: "object"
          properties:
            id:
              type: "integer"
              example: 1
            user_id:
              type: "integer"
              example: 1
            product_id:
              type: "integer"
              example: 1
            total:
              type: "integer"
              example: 2500000
            due_date:
              type: "string"
              example: "2000-06-20T00:00:00Z"
            plan_status:
              type: "integer"
              example: 1
    ObjPlanList:
      type: "array"
      items:
        $ref: "#/components/schemas/ObjPlan"

    ApiResponse401:
      type: "object"
      properties:
        message:
          type: "string"
          description: "Message for invalid process"
          example: "unauthorized"
    ApiResponse404:
      type: "object"
      properties:
        message:
          type: "string"
          description: "Message for invalid process"
          example: "not found"
    ApiResponse400:
      type: "object"
      properties:
        message:
          type: "string"
          description: "Message for invalid process"
          example: "bad request"
    ApiResponse200Delete:
      type: "object"
      properties:
        message:
          type: "string"
          description: "Message for success delete"
          example: "deleted"
    ApiResponse422:
      type: "object"
      properties:
        validation_errors:
          type: "object"
          properties:
            attribute_name:
              type: "array"
              items:
                type: "string"
                example: "Invalid validation message"
            another_attribute_name:
              type: "array"
              items:
                type: "string"
                example: "Invalid validation message"