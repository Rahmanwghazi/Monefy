// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	users "github.com/Rahmanwghazi/Monefy/business/users"
	mock "github.com/stretchr/testify/mock"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// Edit provides a mock function with given fields: domain
func (_m *Usecase) Edit(domain *users.UserDomain) (users.UserDomain, error) {
	ret := _m.Called(domain)

	var r0 users.UserDomain
	if rf, ok := ret.Get(0).(func(*users.UserDomain) users.UserDomain); ok {
		r0 = rf(domain)
	} else {
		r0 = ret.Get(0).(users.UserDomain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*users.UserDomain) error); ok {
		r1 = rf(domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Signin provides a mock function with given fields: username, password
func (_m *Usecase) Signin(username string, password string) (users.UserDomain, error) {
	ret := _m.Called(username, password)

	var r0 users.UserDomain
	if rf, ok := ret.Get(0).(func(string, string) users.UserDomain); ok {
		r0 = rf(username, password)
	} else {
		r0 = ret.Get(0).(users.UserDomain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Signup provides a mock function with given fields: domain
func (_m *Usecase) Signup(domain *users.UserDomain) (users.UserDomain, error) {
	ret := _m.Called(domain)

	var r0 users.UserDomain
	if rf, ok := ret.Get(0).(func(*users.UserDomain) users.UserDomain); ok {
		r0 = rf(domain)
	} else {
		r0 = ret.Get(0).(users.UserDomain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*users.UserDomain) error); ok {
		r1 = rf(domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
