// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	investplans "github.com/Rahmanwghazi/Monefy/business/investplans"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: domain
func (_m *Repository) Create(domain *investplans.InvestPlanDomain) (investplans.InvestPlanDomain, error) {
	ret := _m.Called(domain)

	var r0 investplans.InvestPlanDomain
	if rf, ok := ret.Get(0).(func(*investplans.InvestPlanDomain) investplans.InvestPlanDomain); ok {
		r0 = rf(domain)
	} else {
		r0 = ret.Get(0).(investplans.InvestPlanDomain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*investplans.InvestPlanDomain) error); ok {
		r1 = rf(domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePlan provides a mock function with given fields: domain, id
func (_m *Repository) DeletePlan(domain *investplans.InvestPlanDomain, id uint) (string, error) {
	ret := _m.Called(domain, id)

	var r0 string
	if rf, ok := ret.Get(0).(func(*investplans.InvestPlanDomain, uint) string); ok {
		r0 = rf(domain, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*investplans.InvestPlanDomain, uint) error); ok {
		r1 = rf(domain, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EditPlan provides a mock function with given fields: domain, id
func (_m *Repository) EditPlan(domain *investplans.InvestPlanDomain, id uint) (investplans.InvestPlanDomain, error) {
	ret := _m.Called(domain, id)

	var r0 investplans.InvestPlanDomain
	if rf, ok := ret.Get(0).(func(*investplans.InvestPlanDomain, uint) investplans.InvestPlanDomain); ok {
		r0 = rf(domain, id)
	} else {
		r0 = ret.Get(0).(investplans.InvestPlanDomain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*investplans.InvestPlanDomain, uint) error); ok {
		r1 = rf(domain, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPlanById provides a mock function with given fields: domain, id
func (_m *Repository) GetPlanById(domain *investplans.InvestPlanDomain, id uint) (investplans.InvestPlanDomain, error) {
	ret := _m.Called(domain, id)

	var r0 investplans.InvestPlanDomain
	if rf, ok := ret.Get(0).(func(*investplans.InvestPlanDomain, uint) investplans.InvestPlanDomain); ok {
		r0 = rf(domain, id)
	} else {
		r0 = ret.Get(0).(investplans.InvestPlanDomain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*investplans.InvestPlanDomain, uint) error); ok {
		r1 = rf(domain, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPlans provides a mock function with given fields: domain
func (_m *Repository) GetPlans(domain *investplans.InvestPlanDomain) ([]investplans.InvestPlanDomain, error) {
	ret := _m.Called(domain)

	var r0 []investplans.InvestPlanDomain
	if rf, ok := ret.Get(0).(func(*investplans.InvestPlanDomain) []investplans.InvestPlanDomain); ok {
		r0 = rf(domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]investplans.InvestPlanDomain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*investplans.InvestPlanDomain) error); ok {
		r1 = rf(domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUnfinishedPlans provides a mock function with given fields: domain
func (_m *Repository) GetUnfinishedPlans(domain *investplans.InvestPlanDomain) ([]investplans.InvestPlanDomain, error) {
	ret := _m.Called(domain)

	var r0 []investplans.InvestPlanDomain
	if rf, ok := ret.Get(0).(func(*investplans.InvestPlanDomain) []investplans.InvestPlanDomain); ok {
		r0 = rf(domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]investplans.InvestPlanDomain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*investplans.InvestPlanDomain) error); ok {
		r1 = rf(domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetfinishedPlans provides a mock function with given fields: domain
func (_m *Repository) GetfinishedPlans(domain *investplans.InvestPlanDomain) ([]investplans.InvestPlanDomain, error) {
	ret := _m.Called(domain)

	var r0 []investplans.InvestPlanDomain
	if rf, ok := ret.Get(0).(func(*investplans.InvestPlanDomain) []investplans.InvestPlanDomain); ok {
		r0 = rf(domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]investplans.InvestPlanDomain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*investplans.InvestPlanDomain) error); ok {
		r1 = rf(domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
