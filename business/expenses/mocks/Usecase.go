// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	expenses "github.com/Rahmanwghazi/Monefy/business/expenses"
	mock "github.com/stretchr/testify/mock"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// CreateExpense provides a mock function with given fields: domain
func (_m *Usecase) CreateExpense(domain *expenses.ExpenseDomain) (expenses.ExpenseDomain, error) {
	ret := _m.Called(domain)

	var r0 expenses.ExpenseDomain
	if rf, ok := ret.Get(0).(func(*expenses.ExpenseDomain) expenses.ExpenseDomain); ok {
		r0 = rf(domain)
	} else {
		r0 = ret.Get(0).(expenses.ExpenseDomain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*expenses.ExpenseDomain) error); ok {
		r1 = rf(domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteExpense provides a mock function with given fields: domain, id
func (_m *Usecase) DeleteExpense(domain *expenses.ExpenseDomain, id uint) (string, error) {
	ret := _m.Called(domain, id)

	var r0 string
	if rf, ok := ret.Get(0).(func(*expenses.ExpenseDomain, uint) string); ok {
		r0 = rf(domain, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*expenses.ExpenseDomain, uint) error); ok {
		r1 = rf(domain, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EditExpense provides a mock function with given fields: domain, id
func (_m *Usecase) EditExpense(domain *expenses.ExpenseDomain, id uint) (expenses.ExpenseDomain, error) {
	ret := _m.Called(domain, id)

	var r0 expenses.ExpenseDomain
	if rf, ok := ret.Get(0).(func(*expenses.ExpenseDomain, uint) expenses.ExpenseDomain); ok {
		r0 = rf(domain, id)
	} else {
		r0 = ret.Get(0).(expenses.ExpenseDomain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*expenses.ExpenseDomain, uint) error); ok {
		r1 = rf(domain, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExpenseById provides a mock function with given fields: domain, id
func (_m *Usecase) GetExpenseById(domain *expenses.ExpenseDomain, id uint) (expenses.ExpenseDomain, error) {
	ret := _m.Called(domain, id)

	var r0 expenses.ExpenseDomain
	if rf, ok := ret.Get(0).(func(*expenses.ExpenseDomain, uint) expenses.ExpenseDomain); ok {
		r0 = rf(domain, id)
	} else {
		r0 = ret.Get(0).(expenses.ExpenseDomain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*expenses.ExpenseDomain, uint) error); ok {
		r1 = rf(domain, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExpenses provides a mock function with given fields: domain
func (_m *Usecase) GetExpenses(domain *expenses.ExpenseDomain) ([]expenses.ExpenseDomain, error) {
	ret := _m.Called(domain)

	var r0 []expenses.ExpenseDomain
	if rf, ok := ret.Get(0).(func(*expenses.ExpenseDomain) []expenses.ExpenseDomain); ok {
		r0 = rf(domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]expenses.ExpenseDomain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*expenses.ExpenseDomain) error); ok {
		r1 = rf(domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
